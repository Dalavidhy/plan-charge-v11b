name: Manual Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
      component:
        description: 'Component to deploy'
        required: true
        type: choice
        options:
          - backend
          - frontend
          - both
      version:
        description: 'Version to deploy (latest if empty)'
        required: false
        type: string
      skip_tests:
        description: 'Skip tests (emergency deployment)'
        required: false
        type: boolean
        default: false

env:
  AWS_REGION: eu-west-3

jobs:
  validate-deployment:
    name: 🔍 Validate Deployment Request
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      backend: ${{ steps.components.outputs.backend }}
      frontend: ${{ steps.components.outputs.frontend }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="manual-$(date +%Y.%m.%d)-$(echo ${{ github.sha }} | cut -c1-8)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Deployment version: $VERSION"

      - name: Determine components
        id: components
        run: |
          if [ "${{ github.event.inputs.component }}" == "backend" ] || [ "${{ github.event.inputs.component }}" == "both" ]; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "${{ github.event.inputs.component }}" == "frontend" ] || [ "${{ github.event.inputs.component }}" == "both" ]; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

  manual-tests:
    name: 🧪 Manual Tests
    uses: ./.github/workflows/reusable-test.yml
    needs: validate-deployment
    if: github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        component: [backend, frontend]
        include:
          - component: backend
            enabled: ${{ needs.validate-deployment.outputs.backend == 'true' }}
          - component: frontend
            enabled: ${{ needs.validate-deployment.outputs.frontend == 'true' }}
    with:
      component: ${{ matrix.component }}

  manual-build:
    name: 🏗️ Manual Build
    runs-on: ubuntu-latest
    needs: [validate-deployment, manual-tests]
    if: always() && (needs.manual-tests.result == 'success' || github.event.inputs.skip_tests == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build Backend
        if: needs.validate-deployment.outputs.backend == 'true'
        run: |
          echo "🏗️ Building backend..."
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          cd backend
          
          # Build image
          docker build \
            --platform linux/amd64 \
            --tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/plan-charge-backend:${{ needs.validate-deployment.outputs.version }} \
            --tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/plan-charge-backend:latest \
            .
          
          # Push image
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/plan-charge-backend:${{ needs.validate-deployment.outputs.version }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/plan-charge-backend:latest

      - name: Build Frontend
        if: needs.validate-deployment.outputs.frontend == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Frontend Build Process
        if: needs.validate-deployment.outputs.frontend == 'true'
        run: |
          echo "🎨 Building frontend..."
          
          cd frontend
          npm ci
          
          # Set environment variables
          export VITE_API_URL=https://plan-de-charge.aws.nda-partners.com
          export VITE_ENVIRONMENT=${{ github.event.inputs.environment }}
          export VITE_VERSION=${{ needs.validate-deployment.outputs.version }}
          
          # Build
          npm run build

      - name: Upload Frontend Artifacts
        if: needs.validate-deployment.outputs.frontend == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: manual-frontend-dist
          path: frontend/dist/
          retention-days: 7

  manual-deploy:
    name: 🚀 Manual Deploy
    uses: ./.github/workflows/reusable-deploy.yml
    needs: [validate-deployment, manual-build]
    if: always() && needs.manual-build.result == 'success'
    strategy:
      matrix:
        component: [backend, frontend]
        include:
          - component: backend
            enabled: ${{ needs.validate-deployment.outputs.backend == 'true' }}
          - component: frontend
            enabled: ${{ needs.validate-deployment.outputs.frontend == 'true' }}
    with:
      component: ${{ matrix.component }}
      environment: ${{ github.event.inputs.environment }}
      version: ${{ needs.validate-deployment.outputs.version }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}

  post-manual-deploy:
    name: 📋 Manual Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-deployment, manual-deploy]
    if: always()

    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Manual Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Component(s)**: ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Initiated by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ github.event.inputs.skip_tests == 'true' && 'Skipped' || 'Executed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.manual-deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: https://plan-de-charge.aws.nda-partners.com" >> $GITHUB_STEP_SUMMARY