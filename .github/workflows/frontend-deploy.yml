name: Deploy Frontend

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  workflow_dispatch:

env:
  AWS_REGION: eu-west-3
  NODE_VERSION: '18'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "S3_BUCKET=plan-charge-prod-frontend" >> $GITHUB_ENV
          echo "CLOUDFRONT_DISTRIBUTION_ID=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}" >> $GITHUB_ENV
          echo "API_URL=https://api.plan-de-charge.aws.nda-partners.com" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test -- --run || echo "No tests found or tests failed, continuing..."

      - name: Build frontend
        run: |
          cd frontend

          # Set environment variables for build
          export VITE_API_URL=${{ env.API_URL }}
          export VITE_ENVIRONMENT=${{ env.ENVIRONMENT }}
          export VITE_VERSION=${{ github.sha }}

          # Build the application
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          cd frontend

          # Sync files to S3 bucket
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"

          # Upload HTML files with no cache
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }}/ \
            --delete \
            --cache-control "no-cache, no-store, must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"

      - name: Invalidate CloudFront
        if: env.CLOUDFRONT_DISTRIBUTION_ID
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      - name: Enhanced smoke tests and performance validation
        run: |
          echo "🧪 Running comprehensive frontend validation..."

          # Wait for CloudFront invalidation to complete
          echo "⏳ Waiting for CloudFront invalidation..."
          if [ ! -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
            aws cloudfront wait invalidation-completed \
              --distribution-id $CLOUDFRONT_DISTRIBUTION_ID \
              --id $(aws cloudfront list-invalidations --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --query 'InvalidationList.Items[0].Id' --output text) \
              || echo "⚠️ CloudFront invalidation wait timed out"
          fi

          FRONTEND_URL="https://plan-de-charge.aws.nda-partners.com"

          # Enhanced health checks
          echo "🔗 Testing frontend accessibility..."
          for i in {1..3}; do
            STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $FRONTEND_URL)
            RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" $FRONTEND_URL)
            
            if [[ $STATUS_CODE == "200" ]]; then
              echo "✅ Frontend accessible (${RESPONSE_TIME}s response time)"
              break
            else
              echo "⚠️ Frontend returned status code: $STATUS_CODE (attempt $i/3)"
              if [ $i -eq 3 ]; then
                echo "❌ Frontend health check failed after 3 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

          # Test critical pages
          echo "🔍 Testing critical pages..."
          PAGES=("/" "/auth" "/api/v1/health")
          for page in "${PAGES[@]}"; do
            if [[ $page == "/api/v1/health" ]]; then
              continue # Skip API endpoint (tested in backend)
            fi
            
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${FRONTEND_URL}${page}")
            if [[ $STATUS == "200" ]]; then
              echo "✅ ${page} - OK"
            else
              echo "⚠️ ${page} - Status: $STATUS"
            fi
          done

          # Performance validation
          echo "⚡ Performance metrics:"
          RESPONSE_TIME=$(curl -s -o /dev/null -w "Response Time: %{time_total}s\nDNS Lookup: %{time_namelookup}s\nConnect Time: %{time_connect}s\nTLS Handshake: %{time_appconnect}s\n" $FRONTEND_URL)
          echo "$RESPONSE_TIME"

      - name: Deployment summary
        if: always()
        run: |
          echo "## 🎨 Frontend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **S3 Bucket**: ${{ env.S3_BUCKET }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CloudFront Distribution**: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend URL**: https://plan-de-charge.aws.nda-partners.com" >> $GITHUB_STEP_SUMMARY
