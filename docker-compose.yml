services:
  postgres:
    image: postgres:14-alpine
    container_name: plancharge-postgres
    environment:
      POSTGRES_DB: plancharge
      POSTGRES_USER: plancharge
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-plancharge123}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U plancharge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - plancharge-network

  redis:
    image: redis:7-alpine
    container_name: plancharge-redis
    command: redis-server /usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - plancharge-network

  backend:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: development
    container_name: plancharge-backend
    environment:
      DATABASE_URL: postgresql+asyncpg://plancharge:${POSTGRES_PASSWORD:-plancharge123}@postgres:5432/plancharge
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      PYTHONUNBUFFERED: 1
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      PAYFIT_API_KEY: ${PAYFIT_API_KEY:-your-payfit-api-key}
      PAYFIT_COMPANY_ID: ${PAYFIT_COMPANY_ID:-your-company-id}
      GRYZZLY_API_KEY: ${GRYZZLY_API_KEY:-your-gryzzly-api-key}
      GRYZZLY_API_URL: ${GRYZZLY_API_URL:-https://api.gryzzly.com}
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - pip_cache:/root/.cache/pip
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - plancharge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: plancharge-frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000/api/v1}
      VITE_APP_NAME: ${VITE_APP_NAME:-Plan Charge}
      VITE_ENV: ${VITE_ENV:-development}
    ports:
      - "3000:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - plancharge-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  celery:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: development
    container_name: plancharge-celery
    environment:
      DATABASE_URL: postgresql+asyncpg://plancharge:${POSTGRES_PASSWORD:-plancharge123}@postgres:5432/plancharge
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks worker --loglevel=info
    networks:
      - plancharge-network

  celery-beat:
    build:
      context: .
      dockerfile: docker/backend/Dockerfile
      target: development
    container_name: plancharge-celery-beat
    environment:
      DATABASE_URL: postgresql+asyncpg://plancharge:${POSTGRES_PASSWORD:-plancharge123}@postgres:5432/plancharge
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.tasks beat --loglevel=info
    networks:
      - plancharge-network

volumes:
  postgres_data:
  redis_data:
  pip_cache:

networks:
  plancharge-network:
    driver: bridge