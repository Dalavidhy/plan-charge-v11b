# Production Dockerfile for React Frontend
FROM node:20-alpine as builder

# Variables d'environnement pour le build
ENV NODE_ENV=production

WORKDIR /app

# Copier les fichiers package et installer les dÃ©pendances
COPY frontend/package*.json ./

# Supprimer package-lock.json et forcer la rÃ©installation
RUN rm -f package-lock.json && \
    npm cache clean --force && \
    npm install --silent --no-optional

# Copier le code source
COPY frontend/ ./

# Variables d'environnement pour le build de production
ENV VITE_API_URL=https://plan-de-charge.aws.nda-partners.com/api/v1
ENV VITE_APP_NAME="Plan Charge"
ENV VITE_ENV=production

# Builder l'application avec fallback pour ARM
RUN npm run build || (npm install @rollup/rollup-linux-arm64-musl --silent && npm run build)

# Stage de production avec Nginx
FROM nginx:1.25-alpine as production

# Installer curl pour health check
RUN apk add --no-cache curl

# Copier la configuration Nginx optimisÃ©e
COPY aws-deployment/docker/frontend/nginx.conf /etc/nginx/nginx.conf
COPY aws-deployment/docker/frontend/default.conf /etc/nginx/conf.d/default.conf

# Copier les fichiers buildÃ©s depuis le stage builder
COPY --from=builder /app/dist /usr/share/nginx/html

# Ajouter un script de dÃ©marrage
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'echo "ðŸš€ Starting Plan Charge Frontend..."' >> /docker-entrypoint.sh && \
    echo 'echo "ðŸ“¡ API URL: $VITE_API_URL"' >> /docker-entrypoint.sh && \
    echo 'nginx -g "daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost || exit 1

EXPOSE 80

CMD ["/docker-entrypoint.sh"]